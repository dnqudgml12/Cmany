{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC6B0\\uBCD1\\uD76C\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\hguadminlastlast\\\\src\\\\components\\\\Banner_Components\\\\DataTableend.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useTable, useSortBy, useFilters, usePagination, useRowSelect } from 'react-table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nfunction DataTablepostend({\n  columns,\n  data,\n  setSelectedRowspostend\n}) {\n  _s();\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    selectedFlatRows\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: 5,\n      sortBy: [{\n        id: 'createdAt',\n        desc: true\n      }]\n    }\n  }, useFilters, useSortBy, usePagination, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: 'selection',\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this),\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, ...columns]);\n  });\n  const [checkboxState, setCheckboxState] = useState({});\n  const [checkboxChanged, setCheckboxChanged] = useState(false);\n  /*\r\n    // Update checkbox state when a checkbox is clicked\r\n    const handleCheckboxClick = (row) => {\r\n      const updatedCheckboxState = {\r\n        ...checkboxState,\r\n        [row.original.id]: !checkboxState[row.original.id],\r\n      };\r\n      setCheckboxState(updatedCheckboxState);\r\n      setCheckboxChanged(true); // Indicate that checkbox state has changed\r\n    };\r\n  */\n  // Update checkbox state when a checkbox is clicked\n  const handleCheckboxClick = row => {\n    var _checkboxState$row$or;\n    const updatedCheckboxState = {\n      ...checkboxState,\n      [row.original.id]: {\n        checked: !((_checkboxState$row$or = checkboxState[row.original.id]) !== null && _checkboxState$row$or !== void 0 && _checkboxState$row$or.checked),\n        data: row.original // Store entire row data\n      }\n    };\n\n    setCheckboxState(updatedCheckboxState);\n    setCheckboxChanged(true); // Indicate that checkbox state has changed\n  };\n\n  useEffect(() => {\n    // Update selected rows when checkbox state changes\n    if (checkboxChanged) {\n      const selectedRows = Object.values(checkboxState).filter(entry => entry.checked).map(entry => entry.data);\n      setSelectedRowspostend(selectedRows);\n      setCheckboxChanged(false); // Reset the checkboxChanged state\n    }\n  }, [checkboxChanged, checkboxState, setSelectedRowspostend]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      style: {\n        border: '1px solid #E8E8E8',\n        width: '100%',\n        borderCollapse: 'collapse'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(column.getSortByToggleProps()),\n            style: {\n              padding: '8px',\n              cursor: 'pointer',\n              border: '1px solid #E8E8E8',\n              borderBottom: '1px solid #E8E8E8',\n              background: '#E1EDFF'\n            },\n            children: [column.render('Header'), column.isSorted ? column.isSortedDesc ? ' 🔽' : ' 🔼' : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: page.map(row => {\n          var _checkboxState$row$or2;\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            style: {\n              border: '1px solid #E8E8E8'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              ...row.cells[0].getCellProps(),\n              // Render checkbox in the first cell\n              style: {\n                padding: '8px',\n                border: '1px solid #E8E8E8',\n                borderBottom: '1px solid #E8E8E8',\n                background: 'white'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: ((_checkboxState$row$or2 = checkboxState[row.original.id]) === null || _checkboxState$row$or2 === void 0 ? void 0 : _checkboxState$row$or2.checked) || false,\n                onChange: () => handleCheckboxClick(row)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 1\n            }, this), row.cells.slice(1).map((cell, index) => /*#__PURE__*/_createElement(\"td\", {\n              ...cell.getCellProps(),\n              key: index,\n              style: {\n                padding: '8px',\n                border: '1px solid #E8E8E8',\n                borderBottom: '1px solid #E8E8E8',\n                background: 'white'\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }\n            }, cell.render('Cell')))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(DataTablepostend, \"PtX5Uc1WUsCdEtHpsCgqla6rHPY=\", false, function () {\n  return [useTable];\n});\n_c = DataTablepostend;\nexport default DataTablepostend;\nvar _c;\n$RefreshReg$(_c, \"DataTablepostend\");","map":{"version":3,"names":["React","useEffect","useState","useTable","useSortBy","useFilters","usePagination","useRowSelect","jsxDEV","_jsxDEV","createElement","_createElement","DataTablepostend","columns","data","setSelectedRowspostend","_s","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","selectedFlatRows","initialState","pageIndex","pageSize","sortBy","id","desc","hooks","visibleColumns","push","Header","getToggleAllRowsSelectedProps","fileName","_jsxFileName","lineNumber","columnNumber","Cell","row","checkboxState","setCheckboxState","checkboxChanged","setCheckboxChanged","handleCheckboxClick","_checkboxState$row$or","updatedCheckboxState","original","checked","selectedRows","Object","values","filter","entry","map","children","style","border","width","borderCollapse","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","padding","cursor","borderBottom","background","render","isSorted","isSortedDesc","_checkboxState$row$or2","getRowProps","cells","getCellProps","type","onChange","slice","cell","index","key","__self","__source","_c","$RefreshReg$"],"sources":["C:/Users/우병희/OneDrive/바탕 화면/hguadminlastlast/src/components/Banner_Components/DataTableend.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useTable, useSortBy, useFilters, usePagination, useRowSelect } from 'react-table';\r\n\r\nfunction DataTablepostend({ columns, data, setSelectedRowspostend }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    selectedFlatRows,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      initialState: { pageIndex: 0, pageSize: 5, sortBy: [{ id: 'createdAt', desc: true }] },\r\n    },\r\n    useFilters,\r\n    useSortBy,\r\n    usePagination,\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        {\r\n          id: 'selection',\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <div>\r\n           \r\n            </div>\r\n          ),\r\n          Cell: ({ row }) => (\r\n            <div>\r\n\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    }\r\n  );\r\n\r\n  const [checkboxState, setCheckboxState] = useState({});\r\n  const [checkboxChanged, setCheckboxChanged] = useState(false);\r\n/*\r\n  // Update checkbox state when a checkbox is clicked\r\n  const handleCheckboxClick = (row) => {\r\n    const updatedCheckboxState = {\r\n      ...checkboxState,\r\n      [row.original.id]: !checkboxState[row.original.id],\r\n    };\r\n    setCheckboxState(updatedCheckboxState);\r\n    setCheckboxChanged(true); // Indicate that checkbox state has changed\r\n  };\r\n*/\r\n  // Update checkbox state when a checkbox is clicked\r\n  const handleCheckboxClick = (row) => {\r\n    const updatedCheckboxState = {\r\n      ...checkboxState,\r\n      [row.original.id]: {\r\n        checked: !checkboxState[row.original.id]?.checked,\r\n        data: row.original, // Store entire row data\r\n      },\r\n    };\r\n    setCheckboxState(updatedCheckboxState);\r\n    setCheckboxChanged(true); // Indicate that checkbox state has changed\r\n  };\r\n  useEffect(() => {\r\n    // Update selected rows when checkbox state changes\r\n    if (checkboxChanged) {\r\n      const selectedRows = Object.values(checkboxState)\r\n        .filter((entry) => entry.checked)\r\n        .map((entry) => entry.data);\r\n      setSelectedRowspostend(selectedRows);\r\n      setCheckboxChanged(false); // Reset the checkboxChanged state\r\n    }\r\n  }, [checkboxChanged, checkboxState, setSelectedRowspostend]);\r\n\r\n  return (\r\n    <div>\r\n      <table {...getTableProps()} style={{ border: '1px solid #E8E8E8', width: '100%', borderCollapse: 'collapse' }}>\r\n        <thead>\r\n\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  style={{\r\n                    padding: '8px',\r\n                    cursor: 'pointer',\r\n                    border: '1px solid #E8E8E8',\r\n                    borderBottom: '1px solid #E8E8E8',\r\n                    background: '#E1EDFF',\r\n                  }}\r\n                >\r\n                  {column.render('Header')}\r\n                  {column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n\r\n         \r\n        {page.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()} style={{ border: '1px solid #E8E8E8' }}>\r\n\r\n<td\r\n                  {...row.cells[0].getCellProps()} // Render checkbox in the first cell\r\n                  style={{\r\n                    padding: '8px',\r\n                    border: '1px solid #E8E8E8',\r\n                    borderBottom: '1px solid #E8E8E8',\r\n                    background: 'white',\r\n                  }}\r\n                >\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={checkboxState[row.original.id]?.checked || false}\r\n                    onChange={() => handleCheckboxClick(row)}\r\n                  />\r\n                </td>\r\n                {row.cells.slice(1).map((cell, index) => (\r\n                  <td\r\n                    {...cell.getCellProps()}\r\n                    key={index}\r\n                    style={{\r\n                      padding: '8px',\r\n                      border: '1px solid #E8E8E8',\r\n                      borderBottom: '1px solid #E8E8E8',\r\n                      background: 'white',\r\n                    }}\r\n                  >\r\n                    {cell.render('Cell')}\r\n                  </td>\r\n                ))}\r\n\r\n              </tr>\r\n            );\r\n          })}\r\n\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataTablepostend;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}